(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{1212:function(n,e,i){"use strict";i.r(e);var r,a,t,o=i(1),d=i(140),l=i.n(d),c=i(74),p=i(38);function s(n,e,i,r,a,t,o){try{var d=n[t](o),l=d.value}catch(n){return void i(n)}d.done?e(l):Promise.resolve(l).then(r,a)}function m(n,e){return e||(e=n.slice(0)),Object.freeze(Object.defineProperties(n,{raw:{value:Object.freeze(e)}}))}class u extends(Object(c.a)(p.store)(p.PageView)){static get styles(){return[Object(o.b)(r||(r=m(["\n        :host {\n          background-color: var(--main-section-background-color);\n          padding: var(--padding-wide);\n\n          display: flex;\n          flex-direction: column;\n\n          align-items: center;\n\n          overflow: auto;\n        }\n        h2 {\n          margin: var(--title-margin);\n          font: var(--title-font);\n          color: var(--title-text-color);\n        }\n        [page-description] {\n          margin: var(--page-description-margin);\n          font: var(--page-description-font);\n          color: var(--page-description-color);\n        }\n\n        [form-container] {\n          background-color: var(--theme-white-color);\n          padding: var(--padding-wide);\n          border-radius: var(--border-radius);\n          box-shadow: var(--box-shadow);\n          min-width: 60%;\n          max-width: var(--input-container-max-width);\n          position: relative;\n          clear: both;\n        }\n        label {\n          font: var(--label-font);\n          color: var(--label-color);\n          text-transform: var(--label-text-transform);\n        }\n        input {\n          border: var(--border-dark-color);\n          border-radius: var(--border-radius);\n          margin: var(--input-margin);\n          padding: var(--input-padding);\n          font: var(--input-font);\n\n          flex: 1;\n        }\n        select:focus,\n        input:focus {\n          outline: none;\n        }\n        [field-2column] {\n          display: grid;\n          grid-template-columns: 1fr 1fr;\n          grid-gap: 15px;\n          max-width: var(--content-container-max-width);\n        }\n        [field] {\n          display: flex;\n          flex-direction: column;\n        }\n        [grid-span] {\n          grid-column: span 2;\n        }\n        @media screen and (max-width: 480px) {\n          [form-container] {\n            position: initial;\n            width: 100%;\n          }\n          [field] {\n            grid-column: span 2;\n          }\n        }\n      "])))]}static get properties(){return{appliance:Object}}get context(){return{title:"appliance registration"}}render(){return Object(o.e)(a||(a=m(['\n      <h2>Register new appliance</h2>\n      <p page-description>You can register new appliance here</p>\n\n      <div form-container>\n        <form>\n          <div field-2column>\n            <div field grid-span>\n              <label for="name">name</label>\n              <input id="name" type="text" name="name" />\n            </div>\n\n            <div field grid-span>\n              <label for="description">description</label>\n              <input id="description" type="text" name="description" />\n            </div>\n\n            <div field>\n              <label for="brand">brand</label>\n              <input id="brand" type="text" name="brand" />\n            </div>\n\n            <div field>\n              <label for="serial-no">serial #</label>\n              <input id="serial-no" type="text" name="serialNo" />\n            </div>\n\n            <div field>\n              <label for="model">model</label>\n              <input id="model" type="text" name="model" />\n            </div>\n\n            <div field>\n              <label for="netmask">netmask</label>\n              <input id="netmask" type="text" name="netmask" />\n            </div>\n\n            <mwc-button grid-span @click=',' raised label="register"></mwc-button>\n          </div>\n        </form>\n      </div>\n    '])),this.createAppliance.bind(this))}createAppliance(n){var e,i=this;return(e=function*(){n.preventDefault();var e=i.renderRoot.querySelector("form"),r=new FormData(e),a=Array.from(r.entries()).reduce((n,[e,i])=>(n[e]=i,n),{}),o=yield p.client.mutate({mutation:l()(t||(t=m(["\n        mutation($appliance: NewAppliance!) {\n          createAppliance(appliance: $appliance) {\n            id\n          }\n        }\n      "]))),variables:{appliance:a}});if(o.errors)console.log("creation fail.");else{var d=o.data.createAppliance.id;Object(p.navigate)("appliance/".concat(d))}},function(){var n=this,i=arguments;return new Promise((function(r,a){var t=e.apply(n,i);function o(n){s(t,r,a,o,d,"next",n)}function d(n){s(t,r,a,o,d,"throw",n)}o(void 0)}))})()}pageUpdated(n,e,i){this.active&&(this.renderRoot.querySelector("form").reset(),this.itemId=e.resourceId,this.params=e.params)}}customElements.define("appliance-register",u)}}]);